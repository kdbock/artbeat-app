rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Storage rules for profile images, event images, etc.
    match /profile_images/{userId}/{fileName} {
      // Only allow authenticated users to read profile images
      // Only allow owners to upload/update/delete their own profile images
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /event_images/{fileName} {
      // Allow authenticated users to read event images
      allow read: if request.auth != null;
      // Only allow authenticated users to upload event images
      // Event creators permission is enforced in the app logic
      allow write: if request.auth != null;
    }
    
    match /capture_images/{userId}/{fileName} {
      // Allow access based on ownership
      // Read: Allow any authenticated user to read if the owner has made it public
      // The public flag would be stored in Firestore, so this would be enforced at the app level
      allow read: if request.auth != null;
      // Write: Only allow the user to write to their own folder
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Artist profile images
    match /artist_profiles/{userId}/{fileName} {
      // Anyone can view artist profile images
      allow read: if request.auth != null;
      // Only the artist can upload their own profile images
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Artwork images
    match /artwork/{userId}/{fileName} {
      // Anyone can view artwork
      allow read: if request.auth != null;
      // Only the artist can upload artwork to their folder
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}