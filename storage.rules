rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions for access control
    function isDebugMode() {
      // PRODUCTION: Set to false to enforce App Check
      // For development: Register debug tokens in Firebase Console instead
      return false; // Production mode - App Check enforced
    }

    function hasAppCheck() {
      return request.app != null || isDebugMode();
    }

    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isAuthorized() {
      return isAuthenticated() && hasAppCheck();
    }
    
    function isUserPath(userId) {
      return isAuthorized() && request.auth.uid == userId;
    }

    function isAdmin(userId) {
      return (exists(/databases/$(database)/documents/users/$(userId)) 
        && get(/databases/$(database)/documents/users/$(userId)).data.userType == 'admin');
    }

    // File validation functions
    function isValidImageSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit for images
    }

    function isValidVideoSize() {
      return request.resource.size < 100 * 1024 * 1024; // 100MB limit for videos
    }

    function isValidAudioSize() {
      return request.resource.size < 50 * 1024 * 1024; // 50MB limit for audio
    }

    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }

    function isValidVideoType() {
      return request.resource.contentType.matches('video/.*');
    }

    function isValidAudioType() {
      return request.resource.contentType.matches('audio/.*');
    }

    // Base rules that apply to all paths
    match /{allPaths=**} {
      allow read: if isAuthenticated(); // Require authentication for all reads
      allow write: if false; // Specific paths must explicitly allow write
    }

    // Profile images - authenticated users only with validation
    match /profile/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
    }

    // Artwork images - authenticated users only with validation
    match /artwork/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
    }

    // Post images - authenticated users only with validation
    match /post_images/{allPaths=**} {
      allow read: if isAuthenticated(); // Require authentication
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
    }

    // Root level files - restricted in production
    match /{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Debug uploads path - DISABLED IN PRODUCTION
    // For development, use proper user-specific paths instead
    match /debug_uploads/{fileName} {
      allow read, write: if false; // Disabled in production
    }
    
    // Debug uploads with subdirectories - DISABLED IN PRODUCTION
    match /debug_uploads/{category}/{fileName} {
      allow read, write: if false; // Disabled in production
    }

    // Artwork images - artists can upload their own artwork with validation
    match /artwork_images/{userId}/{artworkId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork upload path - user-specific with validation
    match /artwork_images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork images with subdirectory (e.g., artwork_images/userId/new/fileName)
    match /artwork_images/{userId}/{subDir}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork path without 'images' suffix (legacy support) - secured
    match /artwork/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork videos - artists can upload their own artwork videos with validation
    match /artwork_videos/{userId}/{artworkId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidVideoSize() && isValidVideoType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork video upload path - user-specific with validation
    match /artwork_videos/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidVideoSize() && isValidVideoType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork audio - artists can upload their own artwork audio files with validation
    match /artwork_audio/{userId}/{artworkId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidAudioSize() && isValidAudioType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork audio upload path - user-specific with validation
    match /artwork_audio/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidAudioSize() && isValidAudioType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artist images - for artist profiles (portfolio, banner, etc.) with validation
    match /artist_images/{userId}/{type}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Capture images - allow authenticated users to upload to their own folder with validation
    match /capture_images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin(request.auth.uid)
      ) && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin(request.auth.uid)
      );
    }

    // Legacy captures path - secured with validation
    match /captures/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }
    
    // Post images for community feed - secured with validation
    match /post_images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Post videos for community feed - secured with validation
    match /posts/{userId}/videos/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidVideoSize() && isValidVideoType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Post audio for community feed - secured with validation
    match /posts/{userId}/audio/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidAudioSize() && isValidAudioType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Profile images - secured with validation
    match /profile_images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Enhanced Storage Service paths for profile images - secured with validation
    match /profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Enhanced Storage Service paths for profile thumbnails - secured with validation
    match /profile/thumbnails/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Enhanced Storage Service paths for artwork images (used for cover images) - secured with validation
    match /artwork/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Enhanced Storage Service paths for artwork thumbnails - secured with validation
    match /artwork/thumbnails/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Feedback images - for developer feedback system with validation
    match /feedback_images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Public art images - for art walk public art submissions with validation
    match /public_art_images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Event images - for event creation (headshots, banners, event images) with validation
    match /events/{userId}/{eventId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Event images - user-specific path with validation
    match /events/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Art Walk images - allow authenticated users to upload to their own folder with validation
    match /art_walk_images/{userId}/{artWalkId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Art Walk related paths with validation
    match /art_walks/{walkId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        // Check if user is the owner of the art walk or an admin
        request.auth.uid == request.resource.metadata.userId || 
        isAdmin(request.auth.uid)
      ) && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.metadata.userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Art Walk debug uploads - DISABLED IN PRODUCTION
    match /art_walks_debug/{walkId}/{fileName} {
      allow read, write: if false; // Disabled in production
    }

    // Enhanced storage paths for simplified uploads - secured with validation
    match /temp_uploads/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Simple uploads path - secured with validation
    match /uploads/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Ad images - for advertisement uploads with validation
    match /ads/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin(request.auth.uid)
      ) && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin(request.auth.uid)
      );
    }

    // Admin ads - for admin-created advertisements with validation
    match /admin_ads/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid) && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Artist ads - for artist-created advertisements with validation
    match /artist_ads/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Gallery ads - for gallery-created advertisements with validation
    match /gallery_ads/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // User ads - for regular user-created advertisements with validation
    match /user_ads/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Artist approved ads - special category for artist-approved advertisements with validation
    match /artist_approved_ads/{subpath=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Chat images - for messaging system image uploads with validation
    match /chat_images/{chatId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImageSize() && isValidImageType();
      allow delete: if isAuthenticated();
    }

    // Voice messages - for messaging system voice message uploads with validation
    match /voice_messages/{chatId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidAudioSize() && isValidAudioType();
      allow delete: if isAuthenticated();
    }

    // Chat media - generic path for chat-related media with validation
    match /chat_media/{chatId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        (isValidImageSize() && isValidImageType()) ||
        (isValidVideoSize() && isValidVideoType()) ||
        (isValidAudioSize() && isValidAudioType())
      );
      allow delete: if isAuthenticated();
    }
  }
}