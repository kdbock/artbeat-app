import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import 'package:artbeat_auth/artbeat_auth.dart';
import 'package:artbeat_core/artbeat_core.dart';
import 'package:artbeat_art_walk/artbeat_art_walk.dart';
import 'package:artbeat_community/artbeat_community.dart';
import 'package:artbeat_artwork/artbeat_artwork.dart';
import 'package:artbeat_profile/artbeat_profile.dart';
import 'package:artbeat_capture/artbeat_capture.dart';
import 'package:artbeat_settings/artbeat_settings.dart';
import 'package:artbeat_artist/artbeat_artist.dart';
import 'package:artbeat_messaging/artbeat_messaging.dart';
import 'widgets/developer_menu.dart';

class MyApp extends StatelessWidget {
  final navigatorKey = GlobalKey<NavigatorState>();

  MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider<ChatService>(
          create: (_) => ChatService(),
        ),
        ProxyProvider<ChatService, ChatController>(
          create: (context) => ChatController(context.read<ChatService>()),
          update: (context, chatService, previous) => 
            previous ?? ChatController(chatService),
        ),
      ],
      child: MaterialApp(
        title: 'ARTbeat',
        theme: ArtbeatTheme.lightTheme,
        navigatorKey: navigatorKey,
        home: const AppShell(child: LoadingScreen()),
        builder: (context, child) {
          if (child == null) return const SizedBox.shrink();
          return child;
        },
        routes: {
          '/login': (context) => const LoginScreen(),
          '/register': (context) => const RegisterScreen(),
          '/forgot-password': (context) => const ForgotPasswordScreen(),
          '/dashboard': (context) => DashboardScreen(
                screens: const [
                  DiscoverScreen(), // Home/Discover feed
                  ArtWalkMapScreen(), // Art walks
                  CommunityFeedScreen(), // Community
                  EventsScreen(), // Events
                ],
                onCapturePressed: () => _onCapture(context),
              ),
          '/capture': (context) => const CaptureScreen(),
          '/artwork/upload': (context) {
            final args = ModalRoute.of(context)!.settings.arguments
                as Map<String, dynamic>;
            return ArtworkUploadScreen(imageFile: File(args['file'] as String));
          },
          '/profile/edit': (context) => EditProfileScreen(
              userId: FirebaseAuth.instance.currentUser?.uid ?? ''),
          '/art-walk/create': (context) => const CreateArtWalkScreen(),
          '/settings': (context) => const SettingsScreen(),
          '/chat': (context) => const ChatListScreen(),
          '/chat/new': (context) => const ContactSelectionScreen(),
        },
        onGenerateRoute: (settings) {
          // Handle dynamic routes
          final uri = Uri.parse(settings.name!);
          final pathSegments = uri.pathSegments;

          if (pathSegments.first == 'artwork' && pathSegments.length == 2) {
            return MaterialPageRoute(
              builder: (context) =>
                  ArtworkDetailScreen(artworkId: pathSegments[1]),
            );
          }

          if (pathSegments.first == 'profile' && pathSegments.length == 2) {
            return MaterialPageRoute(
              builder: (context) => ProfileViewScreen(userId: pathSegments[1]),
            );
          }

          if (pathSegments.first == 'art-walk' && pathSegments.length == 2) {
            return MaterialPageRoute(
              builder: (context) => ArtWalkDetailScreen(walkId: pathSegments[1]),
            );
          }

          return null;
        },
      ),
    );
  }

  void _onCapture(BuildContext context) async {
    final result = await Navigator.pushNamed(context, '/capture');
    if (result != null && context.mounted) {
      await Navigator.pushNamed(context, '/artwork/upload',
          arguments: {'file': result});
    }
  }
}

class AppShell extends StatelessWidget {
  final Widget child;

  const AppShell({super.key, required this.child});

  @override
  Widget build(BuildContext context) {
    final canPop = Navigator.of(context).canPop();

    return Scaffold(
      body: child,
      endDrawer: const DeveloperMenu(),
      appBar: AppBar(
        leading: canPop ? const BackButton() : null,
        actions: [
          Builder(
            builder: (context) => IconButton(
              icon: const Icon(Icons.developer_mode),
              onPressed: () {
                final scaffold = Scaffold.of(context);
                scaffold.openEndDrawer();
              },
              tooltip: 'Developer Menu',
            ),
          ),
        ],
      ),
    );
  }
}

class LoadingScreen extends StatefulWidget {
  const LoadingScreen({super.key});

  @override
  State<LoadingScreen> createState() => _LoadingScreenState();
}

class _LoadingScreenState extends State<LoadingScreen> {
  final UserService _userService = UserService();
  String _status = 'Initializing...';
  bool _hasError = false;

  @override
  void initState() {
    super.initState();
    _initialize();
  }

  Future<void> _initialize() async {
    try {
      setState(() {
        _status = 'Initializing services...';
        _hasError = false;
      });

      // Add a small delay to ensure Firebase is fully initialized
      await Future.delayed(const Duration(milliseconds: 500));

      if (!mounted) return;

      // Navigate to appropriate screen
      final user = _userService.currentUser;
      if (user != null) {
        debugPrint('✅ User is logged in, navigating to dashboard...');
        Navigator.pushReplacementNamed(context, '/dashboard');
      } else {
        debugPrint('⚠️ User not logged in, navigating to login...');
        Navigator.pushReplacementNamed(context, '/login');
      }
    } catch (e) {
      if (!mounted) return;
      setState(() {
        _status = 'Error: $e';
        _hasError = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              if (_hasError)
                const Icon(Icons.error_outline,
                    size: 48, color: ArtbeatColors.primaryPurple),
              const SizedBox(height: 16),
              Text(_status,
                  style: TextStyle(
                      color: _hasError
                          ? ArtbeatColors.primaryPurple
                          : ArtbeatColors.textPrimary)),
              if (_hasError)
                TextButton(
                  onPressed: _initialize,
                  child: const Text('Retry'),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

class ErrorApp extends StatelessWidget {
  const ErrorApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: SafeArea(
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.error_outline, size: 64, color: Colors.red),
                const SizedBox(height: 16),
                Text(
                  'Initialization Error',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                const SizedBox(height: 8),
                const Text(
                  'Check debug console for details',
                  style: TextStyle(color: Colors.grey),
                ),
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: () {
                    // Trigger a hot restart
                    const MethodChannel('flutter/hotRestart')
                        .invokeMethod<void>('hotRestart');
                  },
                  child: const Text('Retry'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
