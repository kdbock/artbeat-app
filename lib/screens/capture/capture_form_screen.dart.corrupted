import 'dart:io';
import 'pa      // Up      // Upload image to Firebase Storage
      final file = File(widget.imageFile.path);
      final fileName =
          '${DateTime.now().millisecondsSinceEpoch}.jpg';
      // Use the path structure that matches your storage rules: capture_images/{userId}/{fileName}
      final ref = FirebaseStorage.instance
          .ref()
          .child('capture_images')
          .child(user.uid)
          .child(fileName);ge to Firebase Storage
      final file = File(widget.imageFile.path);
      final fileName =
          '${DateTime.now().millisecondsSinceEpoch}.jpg';
      // Use the path structure that matches your storage rules: capture_images/{userId}/{fileName}
      final ref = FirebaseStorage.instance
          .ref()
          .child('capture_images')
          .child(user.uid)
          .child(fileName);
      final uploadTask = await ref.putFile(file);
      final imageUrl = await uploadTask.ref.getDownloadURL();ter/material.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:image_picker/image_picker.dart';

class CaptureFormScreen extends StatefulWidget {
  final XFile imageFile;
  const CaptureFormScreen({super.key, required this.imageFile});

  @override
  State<CaptureFormScreen> createState() => _CaptureFormScreenState();
}

class _CaptureFormScreenState extends State<CaptureFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  bool _isLoading = false;

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() => _isLoading = true);
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw Exception('User not authenticated');

      // Upload image to Firebase Storage
      final file = File(widget.imageFile.path);
      final fileName =
          'capture_${user.uid}_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final ref = FirebaseStorage.instance
          .ref()
          .child('captures')
          .child(fileName);
      final uploadTask = await ref.putFile(file);
      final imageUrl = await uploadTask.ref.getDownloadURL();

      // Save metadata to Firestore
      await FirebaseFirestore.instance.collection('captures').add({
        'userId': user.uid,
        'imageUrl': imageUrl,
        'title': _titleController.text.trim(),
        'description': _descriptionController.text.trim(),
        'timestamp': Timestamp.now(),
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Capture uploaded successfully')),
        );
        Navigator.popUntil(context, (route) => route.isFirst);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error: ${e.toString()}')));
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add Capture Details')),
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    Image.file(
                      File(widget.imageFile.path),
                      height: 250,
                      width: double.infinity,
                      fit: BoxFit.cover,
                    ),
                    const SizedBox(height: 16),
                    Form(
                      key: _formKey,
                      child: Column(
                        children: [
                          TextFormField(
                            controller: _titleController,
                            decoration: const InputDecoration(
                              labelText: 'Title',
                            ),
                            validator:
                                (v) =>
                                    (v == null || v.isEmpty)
                                        ? 'Enter a title'
                                        : null,
                          ),
                          const SizedBox(height: 16),
                          TextFormField(
                            controller: _descriptionController,
                            decoration: const InputDecoration(
                              labelText: 'Description',
                            ),
                            maxLines: 3,
                            validator:
                                (v) =>
                                    (v == null || v.isEmpty)
                                        ? 'Enter a description'
                                        : null,
                          ),
                          const SizedBox(height: 24),
                          ElevatedButton(
                            onPressed: _submit,
                            child: const Text('Submit'),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
    );
  }
}
