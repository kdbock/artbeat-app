name: Deploy to Production

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      skip_tests:
        description: "Skip tests (emergency deployment only)"
        required: false
        default: "false"

env:
  FLUTTER_VERSION: "3.35.3"
  JAVA_VERSION: "17"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Analyze code
        run: flutter analyze

      - name: Run security validation
        run: |
          chmod +x scripts/validate_production_ready.sh
          ./scripts/validate_production_ready.sh

  build-android-production:
    name: Build Android (Production)
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}
          cache: "gradle"

      - name: Install dependencies
        run: flutter pub get

      - name: Create production environment file
        run: |
          echo "${{ secrets.ENV_PRODUCTION }}" > .env

      - name: Decode keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=keystore.jks
          EOF

      - name: Build Android App Bundle (Production)
        run: flutter build appbundle --release
        env:
          ENVIRONMENT: production

      - name: Sign App Bundle
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: build/app/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload to Google Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.artbeat.app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: production
          status: completed
          whatsNewDirectory: distribution/whatsnew

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-production-aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  build-ios-production:
    name: Build iOS (Production)
    runs-on: macos-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Create production environment file
        run: |
          echo "${{ secrets.ENV_PRODUCTION }}" > .env

      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      - name: Install Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_PRODUCTION }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/production.mobileprovision

      - name: Build iOS IPA (Production)
        run: |
          flutter build ipa --release --export-options-plist=ios/ExportOptions-Production.plist
        env:
          ENVIRONMENT: production

      - name: Upload to App Store Connect
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/artbeat.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-production-ipa
          path: build/ios/ipa/artbeat.ipa
          retention-days: 30

  deploy-firebase-production:
    name: Deploy Firebase Rules (Production)
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy Firestore Rules
        run: firebase deploy --only firestore:rules --project artbeat-production --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Deploy Storage Rules
        run: firebase deploy --only storage:rules --project artbeat-production --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Deploy Cloud Functions
        run: |
          cd functions
          npm ci
          cd ..
          firebase deploy --only functions --project artbeat-production --token "${{ secrets.FIREBASE_TOKEN }}"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      [
        build-android-production,
        build-ios-production,
        deploy-firebase-production,
      ]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android AAB
        uses: actions/download-artifact@v4
        with:
          name: android-production-aab
          path: ./artifacts

      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-production-ipa
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/app-release.aab
            ./artifacts/artbeat.ipa
          generate_release_notes: true
          draft: false
          prerelease: false

  notify-production-deployed:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs:
      [
        build-android-production,
        build-ios-production,
        deploy-firebase-production,
      ]
    if: always()

    steps:
      - name: Deployment Summary
        run: |
          echo "ðŸš€ Production Deployment Complete!"
          echo "Android: ${{ needs.build-android-production.result }}"
          echo "iOS: ${{ needs.build-ios-production.result }}"
          echo "Firebase: ${{ needs.deploy-firebase-production.result }}"
          echo ""
          echo "ðŸ“± Apps submitted to stores"
          echo "ðŸ”¥ Firebase rules deployed"

      - name: Send Slack notification
        if: always()
        run: |
          # Add Slack webhook notification here if needed
          echo "Deployment notification sent"
