#!/bin/zsh

# ARTbeat Module Runner
# This script helps run individual ARTbeat modules for development and testing
# Created: June 15, 2025

# Terminal colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Banner
echo "${PURPLE}╔════════════════════════════════════════════╗${NC}"
echo "${PURPLE}║            ARTbeat Module Runner           ║${NC}"
echo "${PURPLE}╚════════════════════════════════════════════╝${NC}"

# Function to display modules
show_modules() {
  echo -e "${CYAN}Available modules:${NC}"
  local i=1
  for module in packages/artbeat_*/; do
    module_name=$(echo $module | sed 's/packages\/\(.*\)\//\1/')
    local description=""
    
    case "$module_name" in
      "artbeat_core") description="Core components & services" ;;
      "artbeat_auth") description="Authentication features" ;;
      "artbeat_profile") description="User profile management" ;;
      "artbeat_artist") description="Artist & gallery features" ;;
      "artbeat_artwork") description="Artwork management" ;;
      "artbeat_art_walk") description="Public art discovery" ;;
      "artbeat_community") description="Social interaction features" ;;
      "artbeat_settings") description="User preferences" ;;
      "artbeat_messaging") description="User messaging system" ;;
      "artbeat_capture") description="Image capture & processing" ;;
      *) description="Custom module" ;;
    esac
    
    echo -e "${GREEN}$i)${NC} $module_name ${YELLOW}($description)${NC}"
    ((i++))
  done
}

# Function to show help
show_help() {
  echo -e "${BLUE}ARTbeat Module Runner${NC}"
  echo -e "${YELLOW}Description:${NC} Run individual ARTbeat modules for focused development and testing"
  echo ""
  echo -e "${BLUE}Usage:${NC}"
  echo -e "  $0 [options] <module_name|number>"
  echo ""
  echo -e "${BLUE}Options:${NC}"
  echo -e "  ${GREEN}-e${NC}         Use Firebase emulators"
  echo -e "  ${GREEN}-r${NC}         Build in release mode"
  echo -e "  ${GREEN}-v${NC}         Verbose mode (show all Flutter output)"
  echo -e "  ${GREEN}-d <device>${NC} Specify device (e.g., -d chrome)"
  echo -e "  ${GREEN}-h, --help${NC} Show this help message"
  echo ""
  echo -e "${BLUE}Examples:${NC}"
  echo -e "  $0 auth                  # Run auth module (artbeat_auth)"
  echo -e "  $0 artbeat_profile       # Run profile module"
  echo -e "  $0 -e -r artwork         # Run artwork module with emulators in release mode"
  echo -e "  $0 -d chrome community   # Run community module in Chrome browser"
  echo ""
  show_modules
  exit 0
}

# Parse arguments
USE_EMULATOR=false
RELEASE_MODE=false
VERBOSE=false
DEVICE=""

# Check for --help flag first
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  show_help
fi

# Process optional flags
while getopts ":hervd:" opt; do
  case $opt in
    h) show_help ;;
    e) USE_EMULATOR=true ;;
    r) RELEASE_MODE=true ;;
    v) VERBOSE=true ;;
    d) DEVICE="$OPTARG" ;;
    \?) echo -e "${RED}Invalid option: -$OPTARG${NC}" >&2
        show_help ;;
    :) echo -e "${RED}Option -$OPTARG requires an argument.${NC}" >&2
       show_help ;;
  esac
done

# Shift processed options
shift $((OPTIND-1))

# Check if module name is provided
if [ -z "$1" ]; then
  echo -e "${YELLOW}Please provide a module name or number.${NC}"
  echo -e "${BLUE}Usage:${NC} $0 [options] <module_name|number>"
  echo -e "${BLUE}Options:${NC}"
  echo -e "  ${GREEN}-e${NC}  Use Firebase emulators"
  echo -e "  ${GREEN}-r${NC}  Build in release mode"
  echo -e "  ${GREEN}-v${NC}  Verbose mode (show all Flutter output)"
  echo -e "  ${GREEN}-d${NC}  Specify device (e.g., -d chrome)"
  echo ""
  
  show_modules
  
  echo -e "\n${YELLOW}Enter a module number or name (or q to quit):${NC} "
  read -r selection
  
  if [[ "$selection" == "q" ]]; then
    echo -e "${BLUE}Exiting.${NC}"
    exit 0
  fi
  
  if [[ "$selection" =~ ^[0-9]+$ ]]; then
    # User entered a number, convert to module name
    module_index=$selection
    i=1
    for module in packages/artbeat_*/; do
      if [ $i -eq $module_index ]; then
        MODULE_NAME=$(echo $module | sed 's/packages\/\(.*\)\//\1/')
        break
      fi
      ((i++))
    done
    
    if [ -z "$MODULE_NAME" ]; then
      echo -e "${RED}Invalid module number.${NC}"
      exit 1
    fi
  else
    # User entered a name
    MODULE_NAME=$selection
    
    # Add artbeat_ prefix if not provided
    if [[ ! "$MODULE_NAME" == artbeat_* ]]; then
      MODULE_NAME="artbeat_$MODULE_NAME"
    fi
  fi
else
  MODULE_NAME=$1
  
  # Add artbeat_ prefix if not provided
  if [[ ! "$MODULE_NAME" == artbeat_* ]]; then
    MODULE_NAME="artbeat_$MODULE_NAME"
  fi
fi

MODULE_PATH="packages/$MODULE_NAME"

# Check if module exists
if [ ! -d "$MODULE_PATH" ]; then
  echo -e "${RED}Module $MODULE_NAME not found.${NC}"
  show_modules
  exit 1
fi

# Check if main.dart exists in the module's bin directory
MAIN_PATH="$MODULE_PATH/lib/bin/main.dart"
if [ ! -f "$MAIN_PATH" ]; then
  echo -e "${YELLOW}Main file not found at $MAIN_PATH${NC}"
  echo -e "${BLUE}Creating directory structure...${NC}"
  mkdir -p "$MODULE_PATH/lib/bin"
  
  # Convert module name for class name (remove prefix, capitalize words)
  MODULE_CLASS=$(echo ${MODULE_NAME#artbeat_} | sed -r 's/(^|_)([a-z])/\U\2/g')
  
  echo -e "${BLUE}Creating template main.dart file...${NC}"
  cat > "$MAIN_PATH" << EOF
// filepath: $MAIN_PATH
import 'package:artbeat_core/artbeat_core.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:$MODULE_NAME/$MODULE_NAME.dart';

// You can replace this with actual Firebase options for development
final mockFirebaseOptions = FirebaseOptions(
  apiKey: 'AIzaSyAWORLK8SxG6IKkaA5CaY2s3J2OIJ_36TA',
  appId: '1:665020451634:android:70aaba9b305fa17b78652b',
  messagingSenderId: '665020451634',
  projectId: 'wordnerd-artbeat',
  storageBucket: 'wordnerd-artbeat.appspot.com',
);

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize Firebase
  try {
    await Firebase.initializeApp(
      options: mockFirebaseOptions,
    );
    debugPrint('Firebase initialized successfully');

    // Connect to Firebase emulators if requested
    if (const bool.fromEnvironment('USE_FIREBASE_EMULATOR', defaultValue: false)) {
      const String host = 'localhost';
      FirebaseFirestore.instance.useFirestoreEmulator(host, 8080);
      FirebaseAuth.instance.useAuthEmulator(host, 9099);
      FirebaseStorage.instance.useStorageEmulator(host, 9199);
      debugPrint('Connected to Firebase emulators');
    }
  } catch (e) {
    debugPrint('Failed to initialize Firebase: \$e');
    // Continue without Firebase when in development mode
    if (!kDebugMode) rethrow;
  }

  runApp(const ${MODULE_CLASS}ModuleApp());
}

class ${MODULE_CLASS}ModuleApp extends StatelessWidget {
  const ${MODULE_CLASS}ModuleApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Core providers
        ChangeNotifierProvider<UserService>(
          create: (_) => UserService(),
        ),
        // Add module-specific providers here
      ],
      child: MaterialApp(
        title: 'ARTbeat ${MODULE_CLASS} Module',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
          useMaterial3: true,
        ),
        home: const ${MODULE_CLASS}ModuleHome(),
      ),
    );
  }
}

class ${MODULE_CLASS}ModuleHome extends StatelessWidget {
  const ${MODULE_CLASS}ModuleHome({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ARTbeat ${MODULE_CLASS} Module'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('${MODULE_CLASS} Module Demo', 
                     style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
            const SizedBox(height: 20),
            const Text('Standalone development environment', 
                     style: TextStyle(fontSize: 16, fontStyle: FontStyle.italic)),
            const SizedBox(height: 30),
            // Add navigation buttons to module screens here
            const Text('Edit this file to add navigation buttons to module screens',
                     style: TextStyle(color: Colors.grey)),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {},
              child: const Text('Example Button'),
            ),
          ],
        ),
      ),
    );
  }
}
EOF
  
  echo -e "${GREEN}Template created at $MAIN_PATH${NC}"
  echo -e "${YELLOW}Please edit the file to add proper navigation and providers for your module.${NC}"
fi

# Build the run command
run_cmd="flutter run -t \"$MAIN_PATH\""

# Add device if specified
if [ -n "$DEVICE" ]; then
  run_cmd="$run_cmd -d $DEVICE"
fi

# Add release mode if requested
if [ "$RELEASE_MODE" = true ]; then
  run_cmd="$run_cmd --release"
fi

# Add emulator flag if requested
if [ "$USE_EMULATOR" = true ]; then
  run_cmd="$run_cmd --dart-define=USE_FIREBASE_EMULATOR=true"
fi

# Run the command
echo -e "${CYAN}Running $MODULE_NAME module...${NC}"
echo -e "${BLUE}Command:${NC} $run_cmd"

if [ "$VERBOSE" = true ]; then
  eval $run_cmd
else
  # Filter some of the noise in Flutter output
  eval $run_cmd | grep -v "Warning:" | grep -v "Reloaded" | grep -v "Restarted" | grep -v "Debug service listening"
fi
