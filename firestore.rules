rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Captures collection rules
    match /captures/{captureId} {
      allow read: if isAuthenticated();
      allow create: if 
        isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.createdAt is timestamp;
      allow update, delete: if 
        isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Artwork collection rules
    match /artwork/{artworkId} {
      allow read: if isAuthenticated();
      allow create: if 
        isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.createdAt is timestamp;
      allow update: if 
        isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if 
        isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Validate data types and required fields
    function isValidCapture() {
      let data = request.resource.data;
      return data.userId is string &&
             data.createdAt is timestamp &&
             data.imageUrl is string &&
             (!('location' in data) || (
               data.location.latitude is number &&
               data.location.longitude is number
             ));
    }
    
    function isValidArtwork() {
      let data = request.resource.data;
      return data.userId is string &&
             data.createdAt is timestamp &&
             data.imageUrl is string &&
             data.title is string &&
             data.medium is string &&
             (!('location' in data) || (
               data.location.latitude is number &&
               data.location.longitude is number
             ));
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUserOwner(userId);
      
      // Favorites subcollection
      match /favorites/{favoriteId} {
        allow read: if isAuthenticated();
        allow write: if isUserOwner(userId);
      }
      
      // Settings subcollection
      match /settings/{settingId} {
        allow read: if isUserOwner(userId);
        allow write: if isUserOwner(userId);
      }
    }
    
    // ArtWalks collection rules
    match /artWalks/{artWalkId} {
      allow read: if isAuthenticated();
      allow create: if 
        isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.createdAt is timestamp;
      allow update: if 
        isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if 
        isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Posts collection rules
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if 
        isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.createdAt is timestamp;
      allow update, delete: if 
        isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
  }
}
