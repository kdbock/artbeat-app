rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Public posts (feed) - Allow all authenticated users to post and comment
    match /posts/{postId} {
      allow read: if true; // Allow reading all posts
      allow create: if request.auth != null; // Any authenticated user can create posts
      allow update: if request.auth != null && (
        // Post owner can update their own posts
        request.auth.uid == resource.data.userId ||
        // Any authenticated user can update applauseCount for applause functionality
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['applauseCount']) &&
         request.resource.data.applauseCount >= resource.data.applauseCount)
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Applause subcollection - users can manage their own applause
      match /applause/{userId} {
        allow read: if true; // Public reading for counts
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Comments (publicly readable, authenticated users can create, only owner can update/delete)
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null; // Any authenticated user can create comments
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Gifts (publicly readable)
    match /gifts/{giftId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Studios (publicly readable)
    match /studios/{studioId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
    }

    // Commissions (artist can read/write their own commissions)
    match /commissions/{commissionId} {
      allow read, write: if request.auth != null && 
                          (request.auth.uid == resource.data.userId || 
                           request.auth.uid == resource.data.artistId);
    }

    // Subscriptions (users can read/write their own subscription)
    match /subscriptions/{subscriptionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Analytics collections (artwork views and profile views)
    match /artworkViews/{viewId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.artistId || 
                   request.auth.uid == resource.data.viewerId);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.viewerId;
    }

    match /artistProfileViews/{viewId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.artistId || 
                   request.auth.uid == resource.data.viewerId);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.viewerId;
    }

    // Artwork collection (public reading, artists manage their own)
    match /artwork/{artworkId} {
      allow read: if resource.data.isPublic == true || 
                  (request.auth != null && request.auth.uid == resource.data.artistId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.artistId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.artistId;
    }

    // Sponsorships (publicly readable)
    match /sponsorships/{sponsorshipId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Artist profiles (public portfolios)
    match /artistProfiles/{artistId} {
      allow read: if true; // Allow public read of all artist profiles
      allow create: if request.auth != null && (
                    request.auth.uid == request.resource.data.userId || 
                    // Allow creating featured public artist profiles for seeding
                    (request.resource.data.isFeatured == true && 
                     request.resource.data.isPortfolioPublic == true)
                  );
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Captures collection - users can manage their own captures, public captures are readable by all
    match /captures/{captureId} {
      allow read: if resource.data.isPublic == true || 
                  (request.auth != null && request.auth.uid == resource.data.userId);
                  
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
                    
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Artists collection - publicly readable for featured artists, users can manage their own
    match /artists/{artistId} {
      allow read: if true; // Allow public reading of artist profiles
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read: if true; // Allow reading user profiles (for public display)
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Events collection - public events are readable, users can manage their own events
    match /events/{eventId} {
      allow read: if resource.data.isPublic == true || 
                  (request.auth != null && request.auth.uid == resource.data.artistId) ||
                  (request.auth != null && resource.data.attendeeIds != null && 
                   request.auth.uid in resource.data.attendeeIds);
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.artistId;
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.artistId;
    }

    // Art walks collection - similar to events
    match /artWalks/{walkId} {
      allow read: if resource.data.isPublic == true || 
                  (request.auth != null && request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Public Art collection - publicly readable, authenticated users can create
    match /publicArt/{artId} {
      allow read: if true; // Public art is publicly readable
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Developer feedback collection - authenticated users can submit feedback
    match /developer_feedback/{feedbackId} {
      allow read: if request.auth != null; // All authenticated users can read feedback for admin purposes
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null; // Allow any authenticated user to delete (for admin functionality)
    }

    // Fallback: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
