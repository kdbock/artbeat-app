rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    // Admin function optimized to avoid circular dependencies
    function isAdmin(userId) {
      return userId == 'ARFuyX0C44PbYlHSUSlQx55b9vt2';
    }


    function isGallery(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'gallery';
    }

    function isArtist(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'artist';
    }

    function isContentCreator(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.userType == 'artist' ||
         get(/databases/$(database)/documents/users/$(userId)).data.userType == 'gallery');
    }

    // Allow admin access to everything first
    match /{document=**} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // User document rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
      
      // Direct message stats as subcollection
      match /messageStats/{docId} {
        allow read, list: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow write: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        
        // Unread counts as subcollection of messageStats
        match /unreadCounts/{chatId} {
          allow read, list: if isAuthenticated() && (
            isAdmin(request.auth.uid) || 
            request.auth.uid == userId
          );
          allow write: if isAuthenticated() && (
            isAdmin(request.auth.uid) || 
            request.auth.uid == userId
          );
        }
      }
    }

    // Artists collection rules
    match /artists/{artistId} {
      allow read: if true;
      allow list: if true;
      allow create, update: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == artistId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);

      // Allow querying by isFeatured
      match /{document=**} {
        allow read: if true;
        allow list: if true;
      }
    }

    // Artist Profiles collection rules
    match /artistProfiles/{profileId} {
      allow read: if true;
      allow list: if true;
      allow create: if isAuthenticated() && (
        // Allow users to create their own artist profile (userId matches auth.uid)
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        // Allow users to update their own artist profile or artists to update theirs
        request.auth.uid == resource.data.userId ||
        (isArtist(request.auth.uid) && request.auth.uid == resource.data.userId) ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Chat rules
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid)
      );
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
          isAdmin(request.auth.uid)
        );
        allow create: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == resource.data.senderId ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.senderId ||
          isAdmin(request.auth.uid)
        );
      }
    }

    // Message stats
    match /messageStats/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid)
      );
      allow write: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Events
    match /events/{eventId} {
      allow read, list: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid)
      );
    }

    // Artwork
    match /artwork/{artworkId} {
      allow read, list: if true;
      allow create: if isAuthenticated() && isArtist(request.auth.uid);
      allow update, delete: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
    }

    // Subscriptions
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Art Walks
    match /artWalks/{walkId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid)
      );
    }

    // Public Art
    match /publicArt/{artId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.submitterId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Galleries
    match /galleries/{galleryId} {
      allow read: if true;
      allow create: if isAuthenticated() && (
        isGallery(request.auth.uid) ||
        request.resource.data.subscriptionTier == 'gallery'
      );
      allow update: if isAuthenticated() && (
        isGallery(request.auth.uid) && request.auth.uid == resource.data.ownerId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Commissions
    match /commissions/{commissionId} {
      allow read: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId ||
        isGallery(request.auth.uid) && request.auth.uid == resource.data.galleryId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated() && (
        isGallery(request.auth.uid) && request.auth.uid == request.resource.data.galleryId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId ||
        isGallery(request.auth.uid) && request.auth.uid == resource.data.galleryId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Captures
    match /captures/{captureId} {
      allow read, list: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Posts and applause
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();

      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && (
          request.auth.uid == request.resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow update, delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );

        // Nested comment replies
        match /comments/{replyId} {
          allow read: if true;
          allow create: if isAuthenticated() && (
            request.auth.uid == request.resource.data.userId ||
            isAdmin(request.auth.uid)
          );
          allow update, delete: if isAuthenticated() && (
            request.auth.uid == resource.data.userId ||
            isAdmin(request.auth.uid)
          );
        }
      }
    }

    // Developer feedback collection
    match /developer_feedback/{feedbackId} {
      allow read, list: if isAuthenticated() && isAdmin(request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdmin(request.auth.uid);
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Admin collections
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}
