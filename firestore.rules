rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.userType == 'admin';
    }
    
    // Helper function to check if user is moderator or admin
    function isModerator(userId) {
      let userType = get(/databases/$(database)/documents/users/$(userId)).data.userType;
      return userType == 'moderator' || userType == 'admin';
    }
    
    // Helper function to check if user is gallery
    function isGallery(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.userType == 'gallery';
    }
    
    // Helper function to check if user is artist
    function isArtist(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.userType == 'artist';
    }
    
    // Helper function to check if user is artist or gallery (content creators)
    function isContentCreator(userId) {
      let userType = get(/databases/$(database)/documents/users/$(userId)).data.userType;
      return userType == 'artist' || userType == 'gallery';
    }

    // Public posts (feed) - Allow all authenticated users to post and comment
    match /posts/{postId} {
      allow read: if true; // Allow reading all posts
      allow create: if request.auth != null; // Any authenticated user can create posts
      allow update: if request.auth != null && (
        // Post owner can update their own posts
        request.auth.uid == resource.data.userId ||
        // Any authenticated user can update applauseCount for applause functionality
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['applauseCount']) &&
         request.resource.data.applauseCount >= resource.data.applauseCount)
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Applause subcollection - users can manage their own applause
      match /applause/{userId} {
        allow read: if true; // Public reading for counts
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Comments (publicly readable, authenticated users can create, only owner can update/delete)
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null; // Any authenticated user can create comments
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Gifts (publicly readable)
    match /gifts/{giftId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Studios (publicly readable)
    match /studios/{studioId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
    }

    // Commissions (artist-gallery collaborations)
    match /commissions/{commissionId} {
      allow read: if request.auth != null && (
                    // Artist involved in commission
                    request.auth.uid == resource.data.artistUserId ||
                    // Gallery involved in commission
                    request.auth.uid == resource.data.galleryUserId ||
                    // Admin can read all commissions
                    isAdmin(request.auth.uid)
                  );
      allow create: if request.auth != null && (
                    // Gallery can create commissions for artists
                    (isGallery(request.auth.uid) && request.auth.uid == request.resource.data.galleryUserId) ||
                    // Artist can create commission requests
                    (isArtist(request.auth.uid) && request.auth.uid == request.resource.data.artistUserId) ||
                    // Admin can create any commission
                    isAdmin(request.auth.uid)
                  );
      allow update: if request.auth != null && (
                    // Parties involved can update commission
                    request.auth.uid == resource.data.artistUserId ||
                    request.auth.uid == resource.data.galleryUserId ||
                    // Admin can update any commission
                    isAdmin(request.auth.uid)
                  );
      allow delete: if request.auth != null && (
                    // Only admin can delete commissions (for audit trail)
                    isAdmin(request.auth.uid)
                  );
    }

    // Subscriptions (users can read/write their own subscription)
    match /subscriptions/{subscriptionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Analytics collections (artwork views and profile views)
    match /artworkViews/{viewId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.artistId || 
                   request.auth.uid == resource.data.viewerId);
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.viewerId;
      allow update, delete: if request.auth != null && 
                            (request.auth.uid == resource.data.viewerId ||
                             request.auth.uid == resource.data.artistId);
    }

    match /artistProfileViews/{viewId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.artistId || 
                   request.auth.uid == resource.data.viewerId);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.viewerId;
    }

    // Artwork collection (public reading, artists manage their own)
    match /artwork/{artworkId} {
      allow read: if true; // Allow reading all artwork documents and queries
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Likes subcollection - authenticated users can like/unlike artwork
      match /likes/{userId} {
        allow read: if true; // Public reading for like counts
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Sponsorships (publicly readable)
    match /sponsorships/{sponsorshipId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Artist profiles (public portfolios)
    match /artistProfiles/{artistId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == artistId;
    }

    // Art Walks (publicly readable, authenticated users can create)
    match /artWalks/{walkId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
      
      // Visits subcollection - track user visits to art pieces
      match /visits/{visitId} {
        allow read: if request.auth != null;  // Any authenticated user can read visits
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }

    // User art walk data - including completed walks and progress
    match /users/{userId} {
      match /completedWalks/{walkId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /artWalkProgress/{walkId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Achievements
    match /users/{userId}/achievements/{achievementId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Public achievements for leaderboards
    match /publicAchievements/{achievementId} {
      allow read: if true;
      allow write: if false; // Only cloud functions can write public achievements
    }

    // Ticket purchases collection - users can manage their own ticket purchases
    match /ticket_purchases/{purchaseId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || 
                   request.auth.uid == resource.data.eventOwnerId);
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.userId || 
                     request.auth.uid == resource.data.eventOwnerId);
      allow delete: if request.auth != null && 
                    (request.auth.uid == resource.data.userId || 
                     request.auth.uid == resource.data.eventOwnerId);
    }

    // Developer feedback collection - authenticated users can submit feedback
    match /developer_feedback/{feedbackId} {
      allow read: if request.auth != null; // All authenticated users can read feedback for admin purposes
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null; // Allow any authenticated user to delete (for admin functionality)
    }

    // Artist follows collection - users can manage their own follows
    match /artistFollows/{followId} {
      // Allow reading follows to check following status
      // Document ID format is: userId_artistProfileId
      allow read: if request.auth != null;
      // Allow creating/deleting follows (following/unfollowing)
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
    }

    // User profiles (public reading, users manage their own)
    match /users/{userId} {
      allow read: if true; // Allow reading all user profiles
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Users cannot be deleted through client
    }

    // Captures (users manage their own captures)
    match /captures/{captureId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Events (public reading, authenticated users can create)
    match /events/{eventId} {
      allow read: if true; // Public reading for event discovery
      allow create: if request.auth != null && 
                      (request.resource.data.creatorId == request.auth.uid);
      allow update, delete: if request.auth != null && 
                            resource.data.creatorId == request.auth.uid;
    }

    // Ticket purchase rules
    match /ticket_purchases/{purchaseId} {
      // Users can read their own ticket purchases
      allow read: if isAuthenticated() && 
                 (resource.data.userId == request.auth.uid || 
                  resource.data.artistId == request.auth.uid);
      
      // Authenticated users can create ticket purchases
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      // Only the ticket owner or event owner can update/delete
      allow update, delete: if isAuthenticated() && 
                          (resource.data.userId == request.auth.uid || 
                           resource.data.artistId == request.auth.uid);
    }

    // Ads collection - public reading for ad display, owners can manage their ads
    match /ads/{adId} {
      allow read: if true; // Public reading for ad display across the app
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth != null && (
        // Ad owner can update their own ads
        request.auth.uid == resource.data.ownerId ||
        // Admin can update any ad (for approval status changes)
        isAdmin(request.auth.uid)
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        isAdmin(request.auth.uid)
      );
    }

    // Ad payments collection - restricted to payer and admins
    match /ad_payments/{paymentId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.payerId ||
        isAdmin(request.auth.uid)
      );
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.payerId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.payerId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Ad approvals collection - admin-only write, ad owners can read their approvals
    match /ad_approvals/{approvalId} {
      allow read: if request.auth != null && (
        // Ad owner can read approval status for their ads
        request.auth.uid == resource.data.adOwnerId ||
        // Admin can read all approvals
        isAdmin(request.auth.uid)
      );
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Gallery invitations collection - for artist-gallery relationships
    match /gallery_invitations/{invitationId} {
      allow read: if request.auth != null && (
                    // Artist can read invitations sent to them
                    request.auth.uid == resource.data.artistUserId ||
                    // Gallery can read invitations they sent
                    request.auth.uid == resource.data.galleryUserId ||
                    // Admin can read all invitations
                    isAdmin(request.auth.uid)
                  );
      allow create: if request.auth != null && (
                    // Gallery can create invitations for artists
                    (isGallery(request.auth.uid) && request.auth.uid == request.resource.data.galleryUserId) ||
                    // Admin can create any invitation
                    isAdmin(request.auth.uid)
                  );
      allow update: if request.auth != null && (
                    // Artist can update invitations (accept/decline)
                    request.auth.uid == resource.data.artistUserId ||
                    // Gallery can update their invitations
                    request.auth.uid == resource.data.galleryUserId ||
                    // Admin can update any invitation
                    isAdmin(request.auth.uid)
                  );
      allow delete: if request.auth != null && (
                    // Gallery can delete their invitations
                    request.auth.uid == resource.data.galleryUserId ||
                    // Admin can delete any invitation
                    isAdmin(request.auth.uid)
                  );
    }

    // Artwork likes collection (for artwork interaction tracking)
    match /artwork_likes/{likeId} {
      allow read: if true; // Public reading for like counts
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Fallback: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
