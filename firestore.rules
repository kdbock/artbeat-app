rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Artwork collection rules
    match /artwork/{artworkId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Captures collection rules
    match /captures/{captureId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Location collection rules
    match /locations/{locationId} {
      allow read: if isAuthenticated();
    }

    // Default rules for authenticated users
    match /{collection}/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        // Allow writes to user's own documents
        (collection == "users" && document == request.auth.uid) ||
        // Allow writes to user's own collections
        (request.resource.data.userId == request.auth.uid)
      );
    }
  }
}
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Base collection rules for initial app load
    match /{document=**} {
      allow read: if isAuthenticated();
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUserOwner(userId);
      
      // User subcollections
      match /{subcollection}/{docId} {
        allow read: if isAuthenticated();
        allow write: if isUserOwner(userId);
      }
    }
    }

    // Posts collection rules
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidString(request.resource.data.content);
    }
    
    // Applause collection rules
    match /applause/{applauseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidString(request.resource.data.postId);
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Public Art collection rules
    match /publicArt/{artId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidString(request.resource.data.title);
    }

    // ArtWalks collection rules
    match /artWalks/{artWalkId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidTimestamp(request.resource.data.createdAt);
    }

    // Artworks collection rules
    match /artwork/{artworkId} {
      // Allow reading public artwork
      allow read: if isAuthenticated() && (
        resource == null ||  // Allow reading non-existent documents
        request.auth.uid == resource.data.userId ||
        resource.data.isPublic == true ||
        (resource.data.isFeatured == true && resource.data.isPublic == true)
      );
      
      // Allow writing artwork
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
  }
}
