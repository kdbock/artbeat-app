rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Public posts (feed)
    match /posts/{postId} {
      allow read: if resource.data.isPublic == true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Comments (publicly readable, only owner can write/delete)
    match /comments/{commentId} {
      allow read: if true;
      allow write, update, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Gifts (publicly readable)
    match /gifts/{giftId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Studios (publicly readable)
    match /studios/{studioId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
    }

    // Commissions (user can read their own, or as needed)
    match /commissions/{commissionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Sponsorships (publicly readable)
    match /sponsorships/{sponsorshipId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Artist profiles (public portfolios)
    match /artistProfiles/{artistId} {
      allow read: if resource.data.isPortfolioPublic == true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Captures collection
    match /captures/{captureId} {
      allow read: if resource.data.isPublic == true || 
                  (request.auth != null && request.auth.uid == resource.data.userId);
      allow write: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId &&
                   request.auth.uid == request.resource.data.artistId;
    }

    // Captures collection - allow users to save their own captures
    match /captures/{captureId} {
      allow read: if request.auth != null && 
                 (request.auth.uid == resource.data.userId || 
                  resource.data.isPublic == true);
                  
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
                    
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read: if true; // Allow reading user profiles (for public display)
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Fallback: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
