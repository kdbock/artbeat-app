rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    // Admin function using database-based role check for security
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.userType == 'admin';
    }


    function isGallery(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'gallery';
    }

    function isArtist(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'artist';
    }

    function isContentCreator(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.userType == 'artist' ||
         get(/databases/$(database)/documents/users/$(userId)).data.userType == 'gallery');
    }

    // Allow admin access to everything first
    match /{document=**} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // User document rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid) ||
        // Allow updating engagement stats from any authenticated user
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['engagementStats'])) ||
        // Allow updating presence/online status fields
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isOnline', 'lastSeen', 'lastActive'])) ||
        // Allow updating notification preferences by the user themselves
        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['notificationPreferences', 'updatedAt'])) ||
        // Allow updating presence fields along with other allowed fields
        (request.resource.data.diff(resource.data).affectedKeys().hasAny(['isOnline', 'lastSeen', 'lastActive']) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isOnline', 'lastSeen', 'lastActive', 'engagementStats']))
      );
      allow delete: if isAdmin(request.auth.uid);
      
      // Direct message stats as subcollection
      match /messageStats/{docId} {
        allow read, list: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow write: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        
        // Unread counts as subcollection of messageStats
        match /unreadCounts/{chatId} {
          allow read, list: if isAuthenticated() && (
            isAdmin(request.auth.uid) || 
            request.auth.uid == userId
          );
          allow write: if isAuthenticated() && (
            isAdmin(request.auth.uid) || 
            request.auth.uid == userId
          );
        }
      }
      
      // User's completed art walks subcollection
      match /completedWalks/{walkId} {
        allow read, list: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow write: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
      }

      // User's achievements subcollection
      match /achievements/{achievementId} {
        allow read, list: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow write: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
      }

      // User's favorites subcollection
      match /favorites/{favoriteId} {
        allow read, list: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow write: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
      }

      // User's notifications subcollection (for messaging notifications)
      match /notifications/{notificationId} {
        allow read: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow delete: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
      }

      // User's archived chats subcollection
      match /archivedChats/{chatId} {
        allow read: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow write: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
      }

      // User's calendar settings subcollection
      match /calendarSettings/{document=**} {
        allow read: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
        allow write: if isAuthenticated() && (
          isAdmin(request.auth.uid) || 
          request.auth.uid == userId
        );
      }
    }

    // Artists collection rules
    match /artists/{artistId} {
      allow read: if true;
      allow list: if true;
      allow create, update: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == artistId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);

      // Allow querying by isFeatured
      match /{document=**} {
        allow read: if true;
        allow list: if true;
      }
    }

    // Artist Profiles collection rules
    match /artistProfiles/{profileId} {
      allow read: if true;
      allow list: if true;
      allow create: if isAuthenticated() && (
        // Allow users to create their own artist profile (userId matches auth.uid)
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        // Allow users to update their own artist profile or artists to update theirs
        request.auth.uid == resource.data.userId ||
        (isArtist(request.auth.uid) && request.auth.uid == resource.data.userId) ||
        isAdmin(request.auth.uid) ||
        // Allow updating follower count when following/unfollowing artists
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followerCount']))
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Chat rules
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid)
      );
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
          isAdmin(request.auth.uid)
        );
        allow create: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == resource.data.senderId ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.senderId ||
          isAdmin(request.auth.uid)
        );
      }

      // Typing status subcollection
      match /typing/{document=**} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
          isAdmin(request.auth.uid)
        );
        allow write: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
          isAdmin(request.auth.uid)
        );
      }

      // Chat notification settings subcollection
      match /notificationSettings/{userId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
        allow write: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
      }
    }

    // Message stats
    match /messageStats/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid)
      );
      allow write: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Events
    match /events/{eventId} {
      allow read, list: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid)
      );
    }

    // Ticket Purchases
    match /ticket_purchases/{purchaseId} {
      allow read, list: if isAuthenticated() && (
        isAdmin(request.auth.uid) ||
        request.auth.uid == resource.data.userId
      );
      allow create: if isAuthenticated() && (
        isAdmin(request.auth.uid) ||
        request.auth.uid == request.resource.data.userId
      );
      allow update, delete: if isAuthenticated() && (
        isAdmin(request.auth.uid) ||
        request.auth.uid == resource.data.userId
      );
    }

    // Artwork
    match /artwork/{artworkId} {
      allow read, list: if true;
      allow create: if isAuthenticated() && isArtist(request.auth.uid);
      allow update: if isAuthenticated() && (
        (isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId) ||
        isAdmin(request.auth.uid) ||
        // Allow updating engagement stats (viewCount, appreciateCount, etc.) from any authenticated user
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount', 'appreciateCount', 'shareCount', 'engagementStats', 'lastViewed']))
      );
      allow delete: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
    }

    // Subscriptions
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid) ||
        // Allow updating coupon-related fields
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['couponCode', 'couponId', 'originalPrice', 'discountedPrice', 'isFree']))
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Art Walks
    match /artWalks/{walkId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid) ||
        // Allow updating engagement stats (viewCount, appreciateCount, etc.) from any authenticated user
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount', 'appreciateCount', 'shareCount', 'engagementStats', 'lastViewed', 'rating', 'ratingCount']))
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId ||
        isAdmin(request.auth.uid)
      );

      // Art walk comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && (
          request.auth.uid == request.resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow update, delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );

        // Nested comment replies
        match /comments/{replyId} {
          allow read: if true;
          allow create: if isAuthenticated() && (
            request.auth.uid == request.resource.data.userId ||
            isAdmin(request.auth.uid)
          );
          allow update, delete: if isAuthenticated() && (
            request.auth.uid == resource.data.userId ||
            isAdmin(request.auth.uid)
          );
        }
      }

      // Art walk ratings subcollection
      match /ratings/{ratingId} {
        allow read: if true;
        allow create: if isAuthenticated() && (
          request.auth.uid == request.resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow update, delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );
      }

      // Art walk visits subcollection (tracks which art pieces user has visited)
      match /visits/{visitId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow create: if isAuthenticated() && (
          request.auth.uid == request.resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow update, delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );
      }
    }

    // Public Art (populated from captures)
    match /publicArt/{artId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.submitterId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Galleries
    match /galleries/{galleryId} {
      allow read: if true;
      allow create: if isAuthenticated() && (
        isGallery(request.auth.uid) ||
        request.resource.data.subscriptionTier == 'gallery'
      );
      allow update: if isAuthenticated() && (
        isGallery(request.auth.uid) && request.auth.uid == resource.data.ownerId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Commissions
    match /commissions/{commissionId} {
      allow read: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId ||
        isGallery(request.auth.uid) && request.auth.uid == resource.data.galleryId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated() && (
        isGallery(request.auth.uid) && request.auth.uid == request.resource.data.galleryId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId ||
        isGallery(request.auth.uid) && request.auth.uid == resource.data.galleryId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Direct Commissions (High-value custom artwork transactions)
    match /directCommissions/{commissionId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.clientId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);

      // Commission messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.clientId ||
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow create: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.clientId ||
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == resource.data.senderId ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.senderId ||
          isAdmin(request.auth.uid)
        );
      }

      // Commission files subcollection
      match /files/{fileId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.clientId ||
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow create: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.clientId ||
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == resource.data.uploadedBy ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.uploadedBy ||
          isAdmin(request.auth.uid)
        );
      }

      // Commission milestones subcollection
      match /milestones/{milestoneId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.clientId ||
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow create: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == get(/databases/$(database)/documents/directCommissions/$(commissionId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
      }
    }

    // Artist Commission Settings
    match /artistCommissionSettings/{settingsId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
    }

    // Coupons collection
    match /coupons/{couponId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isAdmin(request.auth.uid);
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        isAdmin(request.auth.uid)
      );
    }

    // Gift Campaigns collection
    match /giftCampaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );

      // Gift contributions subcollection
      match /contributions/{contributionId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          request.auth.uid == get(/databases/$(database)/documents/giftCampaigns/$(campaignId)).data.artistId ||
          isAdmin(request.auth.uid)
        );
        allow create: if isAuthenticated() && (
          request.auth.uid == request.resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );
      }
    }

    // Gift Subscriptions collection
    match /giftSubscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.supporterId ||
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.supporterId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.supporterId ||
        request.auth.uid == resource.data.artistId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.supporterId ||
        isAdmin(request.auth.uid)
      );
    }

    // Captures
    match /captures/{captureId} {
      allow read, list: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid) ||
        // Allow updating engagement stats from any authenticated user
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['engagementStats']))
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Posts and applause
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid) ||
        // Allow updating engagement stats from any authenticated user
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['engagementStats']))
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );

      // Applause subcollection
      match /applause/{userId} {
        allow read: if true;
        allow create: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
      }

      // Likes subcollection (for community posts)
      match /likes/{userId} {
        allow read: if true;
        allow create: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          request.auth.uid == userId ||
          isAdmin(request.auth.uid)
        );
      }

      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && (
          request.auth.uid == request.resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow update, delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );

        // Nested comment replies
        match /comments/{replyId} {
          allow read: if true;
          allow create: if isAuthenticated() && (
            request.auth.uid == request.resource.data.userId ||
            isAdmin(request.auth.uid)
          );
          allow update, delete: if isAuthenticated() && (
            request.auth.uid == resource.data.userId ||
            isAdmin(request.auth.uid)
          );
        }
      }
    }

    // Followers collection - users who follow other users
    match /followers/{userId} {
      allow read: if isAuthenticated();
      
      // Subcollection of users who follow this user
      match /users/{followerId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == followerId;
        allow delete: if isAuthenticated() && request.auth.uid == followerId;
      }
    }

    // Following collection - users that other users follow
    match /following/{userId} {
      allow read: if isAuthenticated();
      
      // Subcollection of users this user follows
      match /users/{followedUserId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Artist follows collection - users following artists
    match /artistFollows/{followId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
    }

    // User activity tracking
    match /user_activity/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid)
      );
      allow write: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Developer feedback collection
    match /developer_feedback/{feedbackId} {
      allow read, list: if isAuthenticated() && isAdmin(request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdmin(request.auth.uid);
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Ads collections - allow read access for all authenticated users
    match /ads/{adId} {
      allow read, list: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.ownerId ||
        isAdmin(request.auth.uid)
      );
    }

    // Artist approved ads collection
    match /artist_approved_ads/{adId} {
      allow read, list: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isArtist(request.auth.uid) ||
        isAdmin(request.auth.uid)
      );
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.ownerId ||
        isAdmin(request.auth.uid)
      );
    }

    // General analytics collection
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Ad analytics collection
    match /ad_analytics/{analyticsId} {
      allow read: if isAuthenticated() && (
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Title Sponsorships - Premium $5,000/month app-wide sponsorship
    match /title_sponsorships/{sponsorshipId} {
      // Anyone can read active sponsorships (for display)
      allow read: if isAuthenticated();
      
      // Anyone can create a sponsorship request
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.sponsorId;
      
      // Only sponsor owner or admin can update
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.sponsorId ||
        isAdmin(request.auth.uid)
      );
      
      // Only admin can delete
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
      
      // Allow listing for admins and sponsor owners
      allow list: if isAuthenticated() && (
        isAdmin(request.auth.uid) ||
        request.auth.uid == resource.data.sponsorId
      );
    }

    // Universal engagement system
    match /engagements/{engagementId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Notifications system
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.toUserId ||
        request.auth.uid == resource.data.fromUserId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.toUserId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.toUserId ||
        isAdmin(request.auth.uid)
      );
    }

    // Top-level comments collection (for community feed)
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );

      // Nested comment replies
      match /comments/{replyId} {
        allow read: if true;
        allow create: if isAuthenticated() && (
          request.auth.uid == request.resource.data.userId ||
          isAdmin(request.auth.uid)
        );
        allow update, delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin(request.auth.uid)
        );
      }
    }

    // Content Reviews (Admin only)
    match /content_reviews/{reviewId} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Content Review Logs (Admin only)
    match /content_review_logs/{logId} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Content collection (Admin only for moderation)
    match /content/{contentId} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Art Walk Progress - tracks user progress on art walks
    match /artWalkProgress/{progressId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Art Location Clusters - groups nearby art submissions to prevent duplicates
    match /artLocationClusters/{clusterId} {
      allow read: if true; // Public read access for clustering queries
      allow create: if isAuthenticated(); // Any authenticated user can create clusters
      allow update: if isAuthenticated(); // Allow updates for cluster management
      allow delete: if isAdmin(request.auth.uid); // Only admins can delete clusters
    }

    // Social Activities - tracks user activities for the live feed
    match /socialActivities/{activityId} {
      allow read: if isAuthenticated(); // All authenticated users can read activities
      allow create: if isAuthenticated(); // Any authenticated user can create activities
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin(request.auth.uid)
      );
    }

    // Admin collections
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}
