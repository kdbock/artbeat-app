platform :ios, '15.0'
source 'https://github.com/CocoaPods/Specs.git'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # Explicitly specify Google Maps version
  pod 'GoogleMaps', '9.4.0'
  pod 'Google-Maps-iOS-Utils', '6.1.0'
  
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  # Apply Flutter-specific settings
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      # Base settings
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Architecture settings
      config.build_settings['VALID_ARCHS'] = 'arm64 x86_64'
      config.build_settings['ARCHS'] = 'arm64 x86_64'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
      
      if config.build_settings['PLATFORM_NAME'] == 'iphonesimulator'
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      end
      
      # Compiler settings
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['DEFINES_MODULE'] = 'YES'
      config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
      
      # Remove problematic flags
      config.build_settings['OTHER_CFLAGS'] = nil
      config.build_settings['OTHER_CPLUSPLUSFLAGS'] = nil
    end
  end
  
  # Configure Pods project
  installer.pods_project.build_configurations.each do |config|
    # Remove problematic flags at project level
    config.build_settings['OTHER_CFLAGS'] = nil
    config.build_settings['OTHER_CPLUSPLUSFLAGS'] = nil
    
    # Ensure proper module support
    config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
    config.build_settings['DEFINES_MODULE'] = 'YES'
  end

  # For BoringSSL-GRPC, remove any -G flags from OTHER_CFLAGS
  installer.pods_project.targets.each do |pod_target|
    if pod_target.name == 'BoringSSL-GRPC'
      pod_target.build_configurations.each do |cfg|
        next unless cfg.build_settings['OTHER_CFLAGS']
        cfg.build_settings['OTHER_CFLAGS'] = cfg.build_settings['OTHER_CFLAGS'].split(' ').reject { |flag| flag.start_with?('-G') }.join(' ')
      end
    end
  end
end