# Podfile for ARTbeat Flutter App
platform :ios, '15.0'

# Prevent warnings about the master specs repo
install! 'cocoapods', :warn_for_unused_master_specs_repo => false

# Disable CocoaPods analytics
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Force safe compiler flags
ENV['OTHER_CFLAGS'] = ''
ENV['OTHER_LDFLAGS'] = '$(inherited)'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      # Basic settings for all targets
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
      config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
      
      # Architecture settings
      if config.build_settings['SDKROOT'] == 'iphoneos'
        config.build_settings['ARCHS'] = 'arm64'
        config.build_settings['VALID_ARCHS'] = 'arm64'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
      end
      
      # Remove any '-G' flags from compiler settings
      ['OTHER_CFLAGS', 'OTHER_LDFLAGS', 'OTHER_CPLUSPLUSFLAGS'].each do |flag|
        if config.build_settings[flag]
          config.build_settings[flag] = config.build_settings[flag].gsub(/-G\s*/, '')
        end
      end
      
      # Set safe compiler flags
      config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
      
      # Special handling for gRPC, BoringSSL and abseil
      if target.name.include?('gRPC') || target.name.include?('BoringSSL') || target.name.include?('abseil')
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'GRPC_ARES=0']
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++14'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        config.build_settings['DEPLOYMENT_POSTPROCESSING'] = 'NO'
        config.build_settings.delete('STRIP_INSTALLED_PRODUCT')
        config.build_settings.delete('SUPPORTS_MACCATALYST')
        config.build_settings.delete('CODE_SIGN_IDENTITY')
      end
    end
  end
end
